// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // assume instruction is a C-instruction, do the computation
    Mux16(a=outA, b=inM, sel=instruction[12], out=yInput);
    ALU(x=outD,
        y=yInput, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=aluOut,
        out=outM,
        zr=aluZR, 
        ng=aluNG);

    // assume instruction is C-instruction, compute 
    // the different JMP conditions 
    Not(in=aluZR, out=notZR);
    Not(in=aluNG, out=notNG);
    And(a=notZR, b=notNG, out=isPos);
    Or(a=isPos, b=aluZR, out=isGEQ);
    Or(a=aluNG, b=aluZR, out=isLEQ);
    
    And(a=isPos, b=instruction[0], out=jmpGT);
    And(a=aluZR, b=instruction[1], out=jmpEQ);
    And(a=aluNG, b=instruction[2], out=jmpLT);
    Or(a=jmpGT, b=jmpEQ, out=jmpGE);
    Or(a=jmpGE, b=jmpLT, out=jmpAny);
    And(a=instruction[15], b=jmpAny, out=jmp);


    // we figure out what the new value for A is.
    //
    // inA = (if is A-instruction) ? instruction : aluout
    // loadA = (if is A-instruction) ? true : (A bit of dest is set)
    //
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=isAinstruction);
    Or(a=isAinstruction, b=instruction[5], out=loadA);

    // if the D bit for destination is set AND is a C-instruction, loadD = true
    And(a=instruction[15], b=instruction[4], out=loadD);

    // if the M bit for destination is set AND is a C-instruction, writeM = true
    And(a=instruction[15], b=instruction[3], out=writeM);

	ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM[0..14]);
    DRegister(in=aluOut, load=loadD, out=outD);
    PC(in=outA, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}